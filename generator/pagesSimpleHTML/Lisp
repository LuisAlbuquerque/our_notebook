[{h1 : "Lisp"},{ img : "http://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png"},{p : "
"},{p : "Lisp é uma família de linguagens de programação concebida por John McCarthy em 1958. Num célebre artigo, ele mostra que é possível usar exclusivamente funções matemáticas como estruturas de dados elementares (o que é possível a partir do momento em que há um mecanismo formal para manipular funções: o Cálculo Lambda de Alonzo Church). A linguagem Lisp foi projetada primariamente para o processamento de dados simbólicos.[3] Ela é uma linguagem formal matemática.[3]  Durante os anos de 1970 e 1980, Lisp se tornou a principal linguagem da comunidade de inteligência artificial, tendo sido pioneiro em aplicações como administração automática de armazenamento, linguagens interpretadas e programação funcional.
"},{p : "O seu nome vem de List Processing (a lista é a estrutura de dados fundamental desta linguagem).  Tanto os dados como o programa são representados como listas, o que permite que a linguagem manipule o código fonte como qualquer outro tipo de dados.
"},{p : "Existem diversos dialetos de Lisp, sendo os mais conhecidos: Common Lisp, Scheme e Clojure.[4]
"},{p : "Lisp é uma família de linguagens que possui uma longa história. As primeiras idéias-chave para a linguagem foram desenvolvidas por John McCarthy em 1956, durante um projeto de pesquisa em inteligência artificial. A primeira implementação da linguagem se dá no inverno de 1958.[5] A motivação de McCarthy surgiu da idéia de desenvolver uma linguagem algébrica para processamento de listas para trabalho em IA (inteligência artificial). Esforços para a implementação de seus primeiros dialetos foram empreendidos no IBM 704, IBM 7090, DEC PDP-1, DEC PDP-6 e DEC PDP-10. O dialeto principal entre 1960 e 1965 foi o Lisp 1.5.No início dos anos 1970, houve outros dois dialetos predominantes, desenvolvidos através de esforços anteriores: MacLisp e Interlisp.
"},{p : "Apesar das primeiras implementações do Lisp terem sido realizados nos IBM 704 e 7090, trabalhos posteriores concentraram-se nos DEC PDP-6 e PDP-10, este último sendo o baluarte do Lisp e das pesquisas em IA (inteligência artificial) em lugares como o MIT (Massachussets Institute of Tecnology) e as Universidades de Stanford e Carnegie-Mellon até metade dos anos 1970. O computador PDP-10 e seu antecessor, o PDP-6 eram por definição, especialmente adequados para o Lisp, por possuirem palavras de 36 bits e endereços de 18 bits. Esta arquitetura permitia um registro de um cons cell (par pontuado) em uma única palavra de memória, em instruções simples extraíam o seu car e cdr. Esses computadores possuíam também poderosas instruções de pilha, que proporcionavam rápida chamada a funções; porém suas limitações em 1973 eram evidentes: suportavam um pequeno número de pesquisadores utilizando o Lisp e seu endereçamento em 18 bits limitava o espaço dos programas. Uma resposta para o problema de endereçamento foi o desenvolvimento do "Lisp Machine",um computador dedicado especialmente à tarefa de trabalhar com a linguagem. Outra solução foi a utilização de computadores de uso geral com maior capacidade de endereçamento, como o DEC VAX e o S1 Mark IIA.
"},{p : "
"},{p : "Depois de ter decaído um pouco nos anos 90, Lisp experimentou um ressurgimento de interesse após 2000. A maioria das novas atividades foi focada em implementações de Common Lisp, Scheme, Emacs Lisp, Clojure, e Racket, e inclui o desenvolvimento de novas bibliotecas e aplicativos portáteis.
"},{p : "Muitos novos programadores de Lisp foram inspirados por escritores como Paul Graham e Eric S. Raymond para buscar uma linguagem que outros consideram antiquada. Os programadores New Lisp frequentemente descrevem a linguagem como uma experiência de abrir os olhos e afirmam ser substancialmente mais produtivos do que em outras linguagens.[28] Esse aumento na consciência pode ser contrastado com o "Inverno da IA" e o breve ganho de Lisp em meados da década de 1990.[6]
"},{p : "Dan Weinreb lista em sua pesquisa de implementações Common Lisp[7] onze implementações de Common Lisp ativamente mantidas. Scieneer Common Lisp é uma nova implementação comercial da CMUCL com um primeiro lançamento em 2002.
"},{p : "A comunidade open-source criou uma nova infra-estrutura de suporte: o CLiki é um wiki que coleta informações relacionadas ao Common Lisp, o diretório Common Lisp lista recursos, o #lisp é um canal IRC popular e permite compartilhar e comentar trechos de código (com suporte do lisppaste, um bot de IRC escrito em Lisp), Planet Lisp coleta o conteúdo de vários blogs relacionados a Lisp, no LispForum usuários discutem tópicos de Lisp, Lispjobs é um serviço para anunciar ofertas de emprego e há um serviço de notícias semanal, Weekly Lisp News. Common-lisp.net é um site de hospedagem para projetos Common Lisp de código aberto. [en.wikipedia.org/w/Quicklisp QuickLisp] é um gerenciador de bibliotecas do Common Lisp.
"},{p : "Cinquenta anos de Lisp (1958–2008) foram celebrados em LISP50@OOPSLA.[8] Há reuniões regulares de usuários locais em Boston, Vancouver e Hamburgo. Outros eventos incluem o European Common Lisp Meeting, o European Lisp Symposium e uma Conferênia Internacional de Lisp.
"},{p : "A comunidade Scheme mantém ativamente mais de vinte implementações. Várias novas implementações significativas (Chicken, Gambit, Gauche, Ikarus, Larceny, Ypsilon) foram desenvolvidas nos anos 2000. O Relatório Revisado sobre o Esquema de Linguagem Algorítmica[9] padrão do Scheme foi amplamente aceito na comunidade Scheme. O processo Solicitações de implementação do Scheme criou muitas bibliotecas e extensões quase-padrão para o Scheme. As comunidades de usuários de implementações individuais do Scheme continuam a crescer. Um novo processo de padronização de linguagem foi iniciado em 2003 e levou ao padrão R6RS Scheme em 2007. O uso acadêmico do Scheme para o ensino de informática parece ter diminuído um pouco. Algumas universidades não estão mais usando Scheme em seus cursos introdutórios de ciência da computação;[10][11] MIT agora usa Python em vez de Scheme para seu programa de ciência da computação e MITx massive open online course.[12][13]
"},{p : "Existem vários novos dialetos de Lisp: Arc, Hy, Nu, Liskell e LFE (Lisp Flavored Erlang). O analisador para Julia é implementado em Femtolisp, um dialeto de Scheme (Julia é inspirada por Scheme e é frequentemente considerada um Lisp).
"},{p : "
"},{p : "
"},{p : "Lisp é uma linguagem madura, concebida atenciosamente, altamente portável, linguagem de força industrial. Suas características que mais chamam atenção são:
"},{p : "A linguagem teve um grande sucesso em software do ramo de negócios, engenharia, processamento de documentos, hipermídia (incluindo a Web), matemática, gráficos e animação (Mirai), inteligência artificial e processamento de linguagem natural. Uma das grandes vantagens de Lisp é que ela trata o programa como dado, possibilitando assim um programa inteiro ser dado como entrada de um outro, coisa que não acontece em outras linguagens como C e Pascal. É usada algumas vezes para definir todos os aspectos de uma aplicação, ou apenas o motor de processamento interno, ou apenas a interface do usuário; e ainda é usada com rotina para prover linguagens de comando interativas, linguagens de macro ou script e linguagens extensoras de sistemas comerciais.
"},{p : "A linguagem LISP é interpretada, onde o usuário digita expressões em uma linguagem formal definida e recebe de volta a avaliação de sua expressão. Deste ponto de vista podemos pensar no LISP como uma calculadora, que ao invés de avaliar expressões aritméticas avalia expressões simbólicas, chamadas de expressões.[19] Cada programa em LISP, é, portanto, uma expressão. As expressões são de tamanho indefinido e tem uma estrutura de árvore binária.
A estrutura de utilização da memória disponível é na forma de listas, pois livra o programador da necessidade de alocar espaços diferentes para o programa e para os dados, fazendo com que os dados e os programas sejam homogêneos, característica única da linguagem LISP.
Suas principais características são:
"},{p : "E como desvantagem, destacamos:
"},{p : "O Common Lisp permite várias representações diferentes de números. Estas representações podem ser divididas em 4 tipos: hexadecimais, octais, binários e decimais. Estes últimos podem ser divididos em 4 categorias: inteiros, racionais, ponto flutuante e complexos.
"},{p : "Originalmente, em Lisp havia duas estruturas de dados fundamentais: o átomo e a lista; o átomo pode ser numérico, ou alfanumérico. Exemplos de átomos:
atomo1, a, 12, 54, bola, nil.
"},{p : "O átomo nil representa o valor nulo e ao mesmo tempo representa uma lista vazia.
A lista é a associação de átomos ou outras listas (numa lista chamamos de elementos a cada um dos itens) representandos entre parêntesis. Exemplo de lista:
"},{p : "(esta lista contém 5 átomos)
"},{p : "((jose (22 solteiro)) (antonio (15 casado)))
"},{p : "Normalmente a implementação de uma lista é um encadeamento de pares em que o ponteiro à esquerda do par aponta para o elemento correspondente da lista e em que o ponteiro à direita do par aponta para a restante lista.
"},{p : "Avaliação dados: os átomos quando avaliados retornam eles mesmos. As listas, quando avaliadas, são funções, onde o primeiro elemento representa o nome da função e os elementos seguintes são os argumentos para esta função.
Exemplos de função:
"},{p : "
(+ 3 4) 
> 7 
(* 5 (+ 2 5)) 
> 35 
(car (quote (a b)))
> a 

"},{p : "Normalmente, as implementações de Lisp providenciam um ambiente interactivo de avaliação de expressões.  Os exemplos acima apresentam a interacção com uma implementação de Lisp.  Como pode ser visto também, um programa Lisp pode confundir um programador inexperiente porque requer o uso de muitos parênteses, o que lhe rendeu um trocadilho anglófono para o nome da linguagem: LISP = Lots of Irritating Stupid Parentheses (tradução: Montes de Irritantes Parênteses Estúpidos), ou então LISP = Linguagem Infernal Somente de Parênteses.
"},{p : "Existe o mito de que Lisp é uma linguagem que só funciona com um interpretador.  Na realidade, todos os dialetos relevantes de Lisp têm compiladores.  Alguns dialetos, o compilador é uma função que se pode invocar a partir de código normal para transformar uma lista (que descreve uma função) numa função invocável.  Programas Lisp comerciais são tipicamente compilados por motivos de eficiência, mas a semântica do Lisp permite que o programador possa usar programas interpretados e programas compilados ao mesmo tempo.  A maioria dos usos interpretados ocorrem interativamente, para invocar programas compilados a partir de código escrito por um programador.  Há exemplos disso acima onde se apresenta o resultado interactivo de invocar funções compiladas.
"},{p : "(quote expressão)
Retorna a expressão diretamente, sem tentar qualquer forma da avaliação. Ex: (quote jose) retorna jose, e (quote (jose silva)) retorna (jose silva).
"},{p : "'expressão
Significa o mesmo que (quote expressão). Ex: 'jose retorna jose, e '(jose silva) retorna (jose silva).
"},{p : "(eval expressão)
força a avaliar a expressão. Ex: Embora '(+ 3 4) simplesmente retorna (+ 3 4), (eval '(+ 3 4)) força a avaliar o (+ 3 4) e portanto retorna 7.
"},{p : "(car lista)
Retorna o primeiro elemento da lista. Ex: (car '(jose silva)) retorna jose. Entre os vários dialetos de Lisp, há alguns (por exemplo, ISLISP) que permitem o nome first como alternativa para car.
"},{p : "(cdr lista)
Retorna a lista sem o primeiro elemento. Ex: (cdr '(jose da silva)) retorna (da silva). Há dialetos que usam o nome rest como alternativa para cdr.
"},{p : "(cons atomo lista)
Adiciona átomo ao início da lista. Ex: (cons 'jose '(da silva)) retorna (jose da silva).
"},{p : "Funções matemáticas:
"},{p : "O grande diferencial de Lisp são as macros. As macros são completamente diferentes das que se encontram em C, pois estas somente fazem substituição de texto, enquanto que em Lisp as macros são programas que geram programas.
"},{p : "Lisp foi utilizado para desenvolver o primeiro sistema computacional de matemática simbólica, o Macsyma.
"},{p : "Ele também é utilizado como linguagem de extensão do software de CAD AutoCAD, desenvolvido pela AutoDesk. O editor de textos Emacs também utiliza Lisp como linguagem de extensão. Segundo o seu próprio autor, Richard Stallman, Lisp foi o responsável por tornar o Emacs tão popular, pois o fato da linguagem de extensão dele ser tão poderosa permite que ele seja estendido muito além do que se imaginava que ele originalmente poderia fazer.
"},{p : "A ITA software desenvolveu um sistema de reserva de passagens chamado Orbitz em LISP, ele é utilizado por diversas companhias aéreas. A Symbolics criou um sistema de modelagem 3D que depois foi adquirido pela IZWare e atualmente se chama Mirai, ele foi utilizado nos efeitos do filme Senhor dos Anéis.
"},{p : "O LISP foi utilizado pelo Paul Graham para desenvolver o sistema de e-commerce da Viaweb, que posteriormente foi vendido para o Yahoo por US$ 40 milhões, na época da bolha da internet.
"},{p : "Resultado: 6
"},{p : "Common Lisp:
"},{p : "Scheme:
"},{p : "Embora as definições acima pareçam correctas, para evitar o transbordamento da pilha pode ser preferível usar as seguintes.
"},{p : "Common Lisp:
"},{p : "Scheme:
"},{p : "Na maioria dos dialetos modernos de Lisp usam-se inteiros de precisão numérica indefinida:
"},{p : "Naqueles dialetos também usam-se números racionais de precisão numérica indefinida.  Por exemplo, no Common Lisp se pode ter esta interacção:
"}]